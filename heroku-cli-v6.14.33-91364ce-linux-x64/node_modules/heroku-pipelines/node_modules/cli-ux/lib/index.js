"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("./action/base");
const spinner_1 = require("./action/spinner");
const simple_1 = require("./action/simple");
const errors_1 = require("./errors");
const prompt_1 = require("./prompt");
const stream_1 = require("./stream");
const deps_1 = require("./deps");
class CLI {
    constructor(options = {}) {
        this.options = options;
        this.stdout = new stream_1.StreamOutput(this.options.mock ? undefined : process.stdout);
        this.stderr = new stream_1.StreamOutput(this.options.mock ? undefined : process.stderr);
        const depOpts = {
            debug: !!options.debug,
            mock: !!options.mock,
            stderr: this.stderr,
            stdout: this.stdout,
        };
        this.errorsDep = new errors_1.Errors(depOpts);
        this.promptDep = new prompt_1.Prompt(depOpts);
        this.action = base_1.shouldDisplaySpinner(depOpts) ? new spinner_1.SpinnerAction(depOpts) : new simple_1.SimpleAction(depOpts);
        if (this.options.mock || !process.stderr.isTTY || !process.stdout.isTTY)
            deps_1.deps.chalk.enabled = false;
    }
    prompt(name, options = {}) {
        return this.action.pauseAsync(() => {
            return this.promptDep.prompt(name, options);
        }, deps_1.deps.chalk.cyan('?'));
    }
    log(data, ...args) {
        this.action.pause(() => {
            return this.stdout.log(data, ...args);
        });
    }
    warn(err, options = {}) {
        this.action.pause(() => {
            return this.errorsDep.warn(err, options);
        }, deps_1.deps.chalk.bold.yellow('!'));
    }
    error(err, exitCode = 1) {
        this.action.pause(() => {
            return this.errorsDep.error(err, exitCode);
        }, deps_1.deps.chalk.bold.red('!'));
    }
    exit(code = 1) {
        this.errorsDep.exit(code);
    }
    table(data, options) {
        let table = require('./table');
        return table(this, data, options);
    }
    styledJSON(obj) {
        let json = JSON.stringify(obj, null, 2);
        if (deps_1.deps.chalk.enabled) {
            let cardinal = require('cardinal');
            let theme = require('cardinal/themes/jq');
            this.log(cardinal.highlight(json, { json: true, theme: theme }));
        }
        else {
            this.log(json);
        }
    }
    styledHeader(header) {
        this.log(deps_1.deps.chalk.dim('=== ') + deps_1.deps.chalk.bold(header));
    }
    styledObject(obj, keys) {
        const util = require('util');
        let keyLengths = Object.keys(obj).map(key => key.toString().length);
        let maxKeyLength = Math.max.apply(Math, keyLengths) + 2;
        function pp(obj) {
            if (typeof obj === 'string' || typeof obj === 'number') {
                return obj;
            }
            else if (typeof obj === 'object') {
                return Object.keys(obj)
                    .map(k => k + ': ' + util.inspect(obj[k]))
                    .join(', ');
            }
            else {
                return util.inspect(obj);
            }
        }
        let logKeyValue = (key, value) => {
            this.log(`${deps_1.deps.chalk.blue(key)}:` + ' '.repeat(maxKeyLength - key.length - 1) + pp(value));
        };
        for (var key of keys || Object.keys(obj).sort()) {
            let value = obj[key];
            if (Array.isArray(value)) {
                if (value.length > 0) {
                    logKeyValue(key, value[0]);
                    for (var e of value.slice(1)) {
                        this.log(' '.repeat(maxKeyLength) + pp(e));
                    }
                }
            }
            else if (value !== null && value !== undefined) {
                logKeyValue(key, value);
            }
        }
    }
    done() {
        this.action.stop();
    }
}
exports.CLI = CLI;
exports.cli = new CLI();
