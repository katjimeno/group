import { ActionBase } from './action/base';
import { IWarnOptions } from './errors';
import { IPromptOptions } from './prompt';
import { StreamOutput } from './stream';
import { TableOptions } from './table';
export interface IOptions {
    errlog?: string;
    mock?: boolean;
    debug?: boolean;
}
export declare class CLI {
    readonly options: IOptions;
    action: ActionBase;
    stdout: StreamOutput;
    stderr: StreamOutput;
    private errorsDep;
    private promptDep;
    constructor(options?: IOptions);
    prompt(name: string, options?: IPromptOptions): Promise<any>;
    log(data: string, ...args: any[]): void;
    warn(err: Error | string, options?: IWarnOptions): void;
    error(err: Error | string, exitCode?: number | false): void;
    exit(code?: number): void;
    table(data: any[], options: Partial<TableOptions>): any;
    styledJSON(obj: any): void;
    styledHeader(header: string): void;
    styledObject(obj: any, keys: string[]): void;
    done(): void;
}
export declare const cli: CLI;
