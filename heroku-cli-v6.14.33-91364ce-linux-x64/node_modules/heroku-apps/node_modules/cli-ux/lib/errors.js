"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const deps_1 = require("./deps");
const base_1 = require("./base");
const exit_error_1 = require("./exit_error");
const stream_1 = require("./stream");
const arrow = process.platform === 'win32' ? '!' : 'â–¸';
function bangify(msg, c) {
    const lines = msg.split('\n');
    for (let i = 0; i < lines.length; i++) {
        const line = lines[i];
        lines[i] = ' ' + c + line.substr(2, line.length);
    }
    return lines.join('\n');
}
function getErrorMessage(err) {
    let message;
    if (err.body) {
        // API error
        if (err.body.message) {
            message = util.inspect(err.body.message);
        }
        else if (err.body.error) {
            message = util.inspect(err.body.error);
        }
    }
    // Unhandled error
    if (err.message && err.code) {
        message = `${util.inspect(err.code)}: ${err.message}`;
    }
    else if (err.message) {
        message = err.message;
    }
    return message || util.inspect(err);
}
function wrap(msg) {
    const linewrap = require('@heroku/linewrap');
    const { errtermwidth } = require('./screen');
    return linewrap(6, errtermwidth, {
        skip: /^\$ .*$/,
        skipScheme: 'ansi-color',
    })(msg);
}
class Errors extends base_1.Base {
    error(err, exitCode = 1) {
        if (this.options.mock && typeof err !== 'string' && exitCode !== false)
            throw err;
        try {
            if (typeof err === 'string') {
                err = new Error(err);
            }
            this.logError(err);
            if (this.options.debug) {
                this.stderr.log(err.stack || util.inspect(err));
            }
            else {
                this.stderr.log(bangify(wrap(getErrorMessage(err)), deps_1.deps.chalk.red(arrow)));
            }
        }
        catch (e) {
            console.error('error displaying error');
            console.error(e);
            console.error(err);
        }
        if (exitCode !== false) {
            this.exit(exitCode);
        }
    }
    warn(err, options = {}) {
        try {
            const prefix = options.prefix ? `${options.prefix} ` : '';
            err = typeof err === 'string' ? new Error(err) : err;
            this.logError(err);
            if (this.options.debug) {
                this.stderr.write(`WARNING: ${prefix}`);
                this.stderr.log(err.stack || util.inspect(err));
            }
            else {
                this.stderr.log(bangify(wrap(prefix + getErrorMessage(err)), deps_1.deps.chalk.yellow(arrow)));
            }
        }
        catch (e) {
            console.error('error displaying warning');
            console.error(e);
            console.error(err);
        }
        // }, this.color.bold.yellow('!'))
    }
    exit(code = 0) {
        if (this.options.debug) {
            console.error(`Exiting with code: ${code}`);
        }
        if (this.options.mock) {
            throw new exit_error_1.ExitError(code, this.stdout.output, this.stderr.output);
        }
        else {
            process.exit(code);
        }
    }
    logError(err) {
        if (!this.options.errlog) {
            return;
        }
        stream_1.StreamOutput.logToFile(util.inspect(err) + '\n', this.options.errlog);
    }
}
exports.Errors = Errors;
