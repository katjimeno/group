"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const util = require("util");
const deps_1 = require("./deps");
const config_1 = require("./config");
class StreamOutput {
    constructor(type, stream) {
        this.type = type;
        this.stream = stream;
    }
    static logToFile(msg, logfile) {
        try {
            deps_1.deps.fs.mkdirpSync(path.dirname(logfile));
            deps_1.deps.fs.appendFileSync(logfile, deps_1.deps.stripAnsi(msg));
        }
        catch (err) {
            console.error(err);
        }
    }
    get output() {
        return this.type === 'stdout' ? config_1.Config.stdout : config_1.Config.stderr;
    }
    write(msg, options = {}) {
        msg = msg || '';
        const log = options.log !== false;
        if (log)
            this.writeLogFile(msg, StreamOutput.startOfLine);
        // conditionally show timestamp if configured to display
        if (StreamOutput.startOfLine && config_1.Config.displayTimestamps) {
            msg = this.timestamp(msg);
        }
        if (config_1.Config.mock) {
            let m = deps_1.deps.stripAnsi(msg);
            if (this.type === 'stdout')
                config_1.Config.stdout += m;
            else
                config_1.Config.stderr += m;
        }
        else {
            this.stream.write(msg);
        }
        StreamOutput.startOfLine = msg.endsWith('\n');
    }
    log(data, ...args) {
        let msg = data ? util.format(data, ...args) : '';
        msg += '\n';
        this.write(msg);
    }
    writeLogFile(msg, withTimestamp) {
        if (!this.logfile) {
            return;
        }
        msg = withTimestamp ? this.timestamp(msg) : msg;
        StreamOutput.logToFile(msg, this.logfile);
    }
    get logfile() {
        if (this.type === 'stderr')
            return config_1.Config.errlog;
    }
    timestamp(msg) {
        return `[${deps_1.deps.moment().format()}] ${msg}`;
    }
}
StreamOutput.startOfLine = false;
exports.StreamOutput = StreamOutput;
